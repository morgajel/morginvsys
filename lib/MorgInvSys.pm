package MorgInvSys;

########################################
##
## This module was created for use with morginvsys.
## The latest version can be found at 
## https://github.com/morgajel/morginvsys
##
########################################
use strict;
use Exporter;
use Config::IniFiles;
use Confluence;
use Carp;
use IPC::Open3;
use Net::LDAP;
use Time::Duration;
use vars qw($VERSION @ISA @EXPORT @EXPORT_OK %EXPORT_TAGS);

$VERSION     = 1.00;
@ISA         = qw(Exporter);
%EXPORT_TAGS = ( DEFAULT => [qw( write_page_to_wiki execute_command generate_footer generate_header ldap_search get_default_range )]);
@EXPORT_OK   = ( @{ $EXPORT_TAGS{'DEFAULT'} } );
@EXPORT      = ( @{ $EXPORT_TAGS{'DEFAULT'} } );



##################################################
##
## Generate header used on Confluence Pages.
##
##################################################
sub generate_header{
    my @content;
    push @content, "*{color:red}This page created automatically, please do not manually modify!{color}*";
    # Note, use of svn in this context is very bad. Don't do this, it makes us cry.
    # FIXME If you can come up with a better alternative, I'm all ear.
    #my $scripturl=`svn info "$0" |grep URL`;
    my $scripturl="$0";
    chomp $scripturl;
    push @content, "{color:#888888}Generated by $scripturl {color}\n";
    return @content;
}


##################################################
##
## Generate footer used on Confluence Pages.
##
##################################################
sub generate_footer{
    my ($starttime)=@_;
    my @content;
    my $endtime=time();
    my $totaltime=duration($endtime-$starttime);
    # Displays the total time it has taken to execute.
    push @content, "{color:#888888}This script took{color}{color:#0000ff} $totaltime {color}{color:#888888}to run.{color}\n\n";
    return @content;
}


##################################################
##
## Wrapper for confluence integration.
##
##################################################
sub write_page_to_wiki {
    my ($config,$title,@content)=@_;
    my $wiki = Confluence->new($config->val('Wiki','url'), $config->val('Wiki','user'), $config->val('Wiki','pass'));
    my $page = $wiki->getPage($config->val('Wiki','space'), $title);
    $page->{'content'} = join( "\n",@content);
    $wiki->updatePage($page);
    $wiki->logout();
    return;
}


##################################################
##
## Wrapper for remote ssh calls using open3.
##
##################################################
sub execute_command{
    my ($config, $hostname, $command)=@_;
    my ( $stdin, $stdout, $err );
    my @options = $config->val( 'Network', 'ssh_option' );
    #Note that this does require ssh access to the target machines, usually via ssh keys.
    #FIXME bare ssh with no path makes us sad.
    my $pid= open3( $stdin, $stdout, $err, 'ssh', @options, $hostname, $command );
    waitpid $pid, 0;
    my @output= <$stdout>;
    chomp @output;
    return @output;

}


##################################################
##
## Wrapper for standard ldapsearch calls
##
##################################################
sub ldap_search{
    my ($config,$filter)=@_;
    my $ldap = Net::LDAP->new($config->val('LDAP','host')) or croak "$@";
    my $results = $ldap->search(
        'base'   => $config->val('LDAP','base'),
        'scope'  => 'sub',
        'filter' => $filter,
        );
    return $results
}


##################################################
##
## Wrapper for retrieving groups of subnets.
##
##################################################
sub get_default_range{
    my ($config,$filtername)=@_;
    my $ldap = Net::LDAP->new($config->val('LDAP','host')) or croak "$@";
    my $results = $ldap->search(
        'base'   => $config->val('LDAP','networkBase'),
        'scope'  => 'sub',
        'filter' => $config->val( 'LDAP Filters', $filtername ),
        );
    my @rangelist;
    foreach my $network ( $results->entries() ) {
        # Note that the cn looks like cn=10.100.1.0/23
        push @rangelist, $network->get_value('cn');
    }
    return @rangelist;
}




# PerlDerp.
1;
